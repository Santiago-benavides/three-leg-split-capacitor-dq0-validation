#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 29 17:12:50 2020

@author: santi
"""

import os
import numpy as np
import matplotlib.pyplot as plt

os.environ["PATH"] += os.pathsep + '/usr/local/texlive/2018/bin/x86_64-darwin'

"""
ejemplo uno: se침al adquirida de archivos .csv
"""
#ubicoci칩n de archivo archivo .csv
contenido=os.listdir()
file = open('simulacion_1.csv', 'r')
#almaceno datos de .csv en una lista de python
elementos=[]
for line in file:
    elementos.append(line.split(','))
file.close()
#se definen listas con variables del archivo .csv
t=[]  
Sloada=[]  
Sloadb=[] 
Sloadc=[] 
Mpd=[]  
Mpq=[]  
Mnd=[]  
Mnq=[]  
Mhmd=[]  
Mhmq=[]  
Sfa=[]  
Sfb=[]  
Sfc=[]  
Sa=[]  
Sb=[]  
Sc=[]  
Spdo=[]  
Spqo=[]  
Sndo=[]  
Snqo=[]  
Shmdo=[]  
Shmqo=[]  
Spd=[]  
Spq=[]  
Snd=[]  
Snq=[]  
Shmd=[]  
Shmq=[]  
#inicia el while en 1 para quitar los nombres del archivo .csv y convierte
#los datos de cadena a flotante
n=1
while n<len(elementos):
    #selecci칩n de datos en archivos
    # t.append(float(elementos[n][0]))
    t.append(float(elementos[n][0]))  
    Sloada.append(float(elementos[n][1]))  
    Sloadb.append(float(elementos[n][2])) 
    Sloadc.append(float(elementos[n][3])) 
    Mpd.append(float(elementos[n][4]))  
    Mpq.append(float(elementos[n][5])) 
    Mnd.append(float(elementos[n][6]))  
    Mnq.append(float(elementos[n][7]))  
    Mhmd.append(float(elementos[n][8]))   
    Mhmq.append(float(elementos[n][9]))   
    Sfa.append(float(elementos[n][10]))   
    Sfb.append(float(elementos[n][11]))   
    Sfc.append(float(elementos[n][12]))   
    Sa.append(float(elementos[n][13]))   
    Sb.append(float(elementos[n][14]))   
    Sc.append(float(elementos[n][15]))   
    Spdo.append(float(elementos[n][16]))   
    Spqo.append(float(elementos[n][17]))   
    Sndo.append(float(elementos[n][18]))   
    Snqo.append(float(elementos[n][19]))   
    Shmdo.append(float(elementos[n][20]))   
    Shmqo.append(float(elementos[n][21]))   
    Spd.append(float(elementos[n][22]))  
    Spq.append(float(elementos[n][23]))   
    Snd.append(float(elementos[n][24]))   
    Snq.append(float(elementos[n][25]))  
    Shmd.append(float(elementos[n][26]))  
    Shmq.append(float(elementos[n][27]))   
    n=n+1


#graficado de se침ales csv
    
plt.close("all")
    
    
plt.figure(1,figsize=[10,5])
plt.subplot(1,2,1)
limsupy=max([max(Sloada),max(Sloadb),max(Sloadc)])
limminy=min([min(Sloada),min(Sloadb),min(Sloadc)])
plt.plot(t,Sloada, label="I loadA= "+str(round(max(Sloada[int(len(t)/4):]),2)))
plt.plot(t,Sloadb, label="I loadB= "+str(round(max(Sloadb[int(len(t)/4):]),2)))
plt.plot(t,Sloadc, label="I loadC= "+str(round(max(Sloadc[int(len(t)/4):]),2)))
plt.ylabel("Amperios (A)")
plt.xlabel("tiempo (s)")
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.ylim(1.2*limminy, limsupy*1.55)
plt.legend()
plt.grid()
plt.text(-max(t)/5,-limsupy*1.55, "a)", size=20 )

plt.subplot(1,2,2)
limsupy=max([max(Mpd),max(Mpq),max(Mnd),max(Mnq),max(Mhmd),max(Mhmq)])
limminy=min([min(Mpd),min(Mpq),min(Mnd),min(Mnq),min(Mhmd),min(Mhmq)])
plt.plot(t,Mpd, label="Ipd= "+str(round(max(Mpd[int(len(t)/4):]),2)))
plt.plot(t,Mpq, label="Ipq= "+str(round(max(Mpq[int(len(t)/4):]),2)))
plt.plot(t,Mnd, label="Ind= "+str(round(max(Mnd[int(len(t)/4):]),2)))
plt.plot(t,Mnq, label="Inq= "+str(round(max(Mnq[int(len(t)/4):]),2)))
plt.plot(t,Mhmd, label="Ihmd= "+str(round(max(Mhmd[int(len(t)/4):]),2)))
plt.plot(t,Mhmq, label="Ihmq= "+str(round(max(Mhmq[int(len(t)/4):]),2)))
plt.ylabel("Amperios (A)")
plt.xlabel("tiempo (s)")
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.ylim(1.2*limminy, limsupy*1.5)
plt.legend()
plt.grid()
plt.text(-max(t)/5,-limsupy*1.6, "b)", size=20 )

plt.savefig("s1_01_corriente_de_carga.pdf")

plt.figure(2,figsize=[10,7])
plt.subplot(2,2,1)
limsupy=max([max(Sfa),max(Sfb),max(Sfc)])
limminy=min([min(Sfa),min(Sfb),min(Sfc)])
plt.plot(t,Sfa, label="I RedA= "+str(round(max(Sfa[int(len(t)/4):]),2)))
plt.plot(t,Sfb, label="I RedB= "+str(round(max(Sfb[int(len(t)/4):]),2)))
plt.plot(t,Sfc, label="I RedC= "+str(round(max(Sfc[int(len(t)/4):]),2)))
plt.ylabel("Amperios (A)")
plt.xlabel("tiempo (s)")
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.ylim(1.2*limminy, limsupy*1.65)
plt.legend()
plt.grid()
plt.text(-max(t)/5,-limsupy*1.55, "a)", size=20 )

plt.subplot(2,2,2)
limsupy=max([max(Sa),max(Sb),max(Sc)])
limminy=min([min(Sa),min(Sb),min(Sc)])
plt.plot(t,Sa, label="I LoadA= "+str(round(max(Sa[int(len(t)/4):]),2)))
plt.plot(t,Sb, label="I LoadB= "+str(round(max(Sb[int(len(t)/4):]),2)))
plt.plot(t,Sc, label="I LoadC= "+str(round(max(Sc[int(len(t)/4):]),2)))
plt.ylabel("Amperios (A)")
plt.xlabel("tiempo (s)")
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.ylim(1.2*limminy, limsupy*1.65)
plt.legend()
plt.grid()
plt.text(-max(t)/5,-limsupy*1.6, "c)", size=20 )

plt.subplot(2,2,3)
limsupy=max([max(Spdo),max(Spqo),max(Sndo),max(Snqo),max(Shmdo),max(Shmqo)])
limminy=min([min(Spdo),min(Spqo),min(Sndo),min(Snqo),min(Shmdo),min(Shmqo)])
plt.plot(t,Spdo, label="Ipd= "+str(round(max(Spdo[int(len(t)/4):]),2)))
plt.plot(t,Spqo, label="Ipq= "+str(round(max(Spqo[int(len(t)/4):]),2)))
plt.plot(t,Sndo, label="Ind= "+str(round(max(Sndo[int(len(t)/4):]),2)))
plt.plot(t,Snqo, label="Inq= "+str(round(max(Snqo[int(len(t)/4):]),2)))
plt.plot(t,Shmdo, label="Ihmd= "+str(round(max(Shmdo[int(len(t)/4):]),2)))
plt.plot(t,Shmqo, label="Ihmq= "+str(round(max(Shmqo[int(len(t)/4):]),2)))
plt.ylabel("Amperios (A)")
plt.xlabel("tiempo (s)")
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.ylim(1.2*limminy, limsupy*1.5)
plt.legend()
plt.grid()
plt.text(-max(t)/5,limminy*2.5, "b)", size=20 )

plt.subplot(2,2,4)
limsupy=max([max(Spd),max(Spq),max(Snd),max(Snq),max(Shmd),max(Shmq)])
limminy=min([min(Spd),min(Spq),min(Snd),min(Snq),min(Shmd),min(Shmq)])
plt.plot(t,Spd, label="Ipd= "+str(round(max(Spd[int(len(t)/4):]),2)))
plt.plot(t,Spq, label="Ipq= "+str(round(max(Spq[int(len(t)/4):]),2)))
plt.plot(t,Snd, label="Ind= "+str(round(max(Snd[int(len(t)/4):]),2)))
plt.plot(t,Snq, label="Inq= "+str(round(max(Snq[int(len(t)/4):]),2)))
plt.plot(t,Shmd, label="Ihmd= "+str(round(max(Shmd[int(len(t)/4):]),2)))
plt.plot(t,Shmq, label="Ihmq= "+str(round(max(Shmq[int(len(t)/4):]),2)))
plt.ylabel("Amperios (A)")
plt.xlabel("tiempo (s)")
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.ylim(1.2*limminy, limsupy*1.5)
plt.legend()
plt.grid()
plt.text(-max(t)/5,-limsupy*1.6, "d)", size=20 )

plt.savefig("s1_02_corriente_fuente_corriente_red.pdf")







